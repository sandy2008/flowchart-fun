{"version":3,"sources":["components/Layout.module.css","components/Graph.module.css","components/Spinner.module.css","components/UnmountDeclare.tsx","utils.ts","components/svgs.tsx","components/Graph.tsx","components/Spinner.tsx","components/Layout.tsx","components/ReadOnly.tsx","constants.ts"],"names":["module","exports","UnmountDeclare","setIsReady","useContext","AppContext","useEffect","idMatch","RegExp","matchIndent","base","getSize","label","x","resizer","document","getElementById","innerHTML","replace","firstChild","range","createRange","selectNodeContents","width","Array","from","getClientRects","reduce","max","Math","cleanup","floor","height","regressionY","clientHeight","getEdgeLabel","line","hasId","match","lineWithoutId","slice","length","indexOf","split","trim","getNodeLabel","value","join","getNodeId","lineNumber","toString","ceil","Twitter","props","xmlns","viewBox","d","Github","cytoscape","prototype","hasInitialised","use","dagre","cytoscapeSvg","Graph","textToParse","setHoverLineNumber","shouldResize","cy","useRef","errorCy","animate","search","useLocation","URLSearchParams","get","useAnimationSetting","graphInitialized","updateGraph","useCallback","current","error","newElements","text","elements","lines","strip","preserveNewlines","indentMatch","linkMatch","indent","parent","checkLine","currentLine","currentLineIndent","source","target","id","map","data","includes","count","parseInt","push","labelToId","acc","el","Object","entries","index","element","values","parseText","json","destroy","layout","LAYOUT","run","center","handleResize","console","log","resize","fit","padding","debouncedResize","useDebouncedCallback","window","addEventListener","callback","removeEventListener","downloadImage","svgStr","svg","full","scale","svgEl","DOMParser","parseFromString","squares","children","querySelectorAll","filter","getAttribute","forEach","setAttribute","originalTextComment","createComment","appendChild","correctedSvgStr","documentElement","outerHTML","saveAs","Blob","type","container","style","selector","backgroundColor","lineColor","color","textColor","shape","userZoomingEnabled","userPanningEnabled","boxSelectionEnabled","cyCurrent","errorCyCurrent","nodeHighlight","this","addClass","edgeHighlight","unhighlight","removeClass","undefined","on","className","styles","GraphContainer","template","overflow","content","flow","p","items","gap","href","media","as","onClick","title","URL","location","origin","encodeURIComponent","rel","r","PI","Spinner","strokeWidth","fill","cx","strokeDasharray","strokeDashoffset","Layout","useState","triggerResize","isReady","Loading","App","at","tablet","display","root","defaultSize","maxWidth","minWidth","enable","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","TextareaContainer","handleClasses","resizableHandle","onResizeStop","n","background","ReadOnly","graphText","useParams","decodeURIComponent","hoverLineNumber","editorRef","decorations","editor","deltaDecorations","startLineNumber","startColumn","endLineNumber","endColumn","options","isWholeLine","defaultValue","loading","minimap","enabled","fontSize","tabSize","insertSpaces","wordBasedSuggestions","occurrencesHighlight","renderLineHighlight","highlightActiveIndentGuide","scrollBeyondLastLine","renderIndentGuides","overviewRulerBorder","lineDecorationsWidth","renderValidationDecorations","hideCursorInOverviewRuler","matchBrackets","selectionHighlight","lineHeight","readOnly","onMount","monaco","name","rankDir","spacingFactor","defaultText"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,kBAAoB,kCAAkC,gBAAkB,gCAAgC,QAAU,wBAAwB,QAAU,0B,oBCAhMD,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,MAAQ,uB,oBCAzED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,wB,iCCD5D,qDAOe,SAASC,IAAkB,IAChCC,EAAeC,qBAAWC,KAA1BF,WAIR,OAHAG,qBAAU,WACR,OAAOH,IACN,CAACA,IACG,O,oPCRHI,EAAU,IAAIC,OAAO,gBACrBC,EAAc,IAAID,OAAO,UA+G/B,IAAME,EAAO,KAIb,SAASC,EAAQC,GACf,IAiDmBC,EAjDbC,EAAUC,SAASC,eAAe,WACxC,GAAIF,IAMFA,EAAQG,UAAgCL,EA2D/BM,QAAQ,MAAO,YA1DpBJ,EAAQK,YAAY,CACtB,IAAMC,EAAQL,SAASM,cACvBD,EAAME,mBAAmBR,EAAQK,YACjC,IAAMI,EAAQC,MAAMC,KAAKL,EAAMM,kBAAkBC,QAC/C,SAACC,EAAD,OAAQL,EAAR,EAAQA,MAAR,OAAqBA,EAAQK,EAAML,EAAQK,IAC3C,GAMF,MAJkB,CAChBL,MAAOM,KAAKD,IApBH,IAoBiBE,GAiCbjB,EAjCiCU,EAkC7CM,KAAKE,MAAM,OAAUlB,EAAI,MAjC1BmB,OAAQH,KAAKD,IApBH,GAoBkBE,EAAQG,EAAYnB,EAAQoB,kBAQhE,SAASC,EAAaC,GACpB,IAAMC,EAAQD,EAAKE,MAAM/B,GACnBgC,EAAgBF,EAAQD,EAAKI,MAAMH,EAAM,GAAGI,QAAUL,EAC5D,OAAIG,EAAcG,QAAQ,OAAS,EAC1BH,EAAcI,MAAM,MAAM,GAAGC,OAE/B,GAET,SAASC,EAAaT,GACpB,IAAMC,EAAQD,EAAKE,MAAM/B,GACnBgC,EAAgBF,EAAQD,EAAKI,MAAMH,EAAM,GAAGI,QAAUL,EACxDU,EAAQP,EAAcK,OAI1B,OAHIL,EAAcG,QAAQ,OAAS,IACjCI,EAAQP,EAAcI,MAAM,MAAMH,MAAM,GAAGO,KAAK,MAAMH,QAEpCE,EAsBT5B,QAAQ,UAAW,MAnBhC,SAAS8B,EAAUZ,EAAca,GAC/B,IAAMZ,EAAQD,EAAKE,MAAM/B,GACzB,OAAO8B,EAAQA,EAAM,GAAKY,EAAWC,WAOvC,SAASjB,EAAYpB,GACnB,OAAOgB,KAAKE,MAAM,OAAUlB,EAAI,IAIlC,SAASiB,EAAQjB,GACf,OAAOgB,KAAKsB,KAAKtC,EAAIH,GAAQA,E,WCnLxB,SAAS0C,EAAQC,GACtB,OACE,6CACEC,MAAM,6BACN/B,MAAO,GACPS,OAAQ,GACRuB,QAAQ,aACJF,GALN,aAOE,sBAAMG,EAAE,4bAKP,SAASC,IACd,OACE,sBACEF,QAAQ,YACRhC,MAAO,GACPS,OAAQ,GACRsB,MAAM,6BAJR,UAME,gCAAQ,gBACR,sBAAME,EAAE,gtB,uCCLTE,IAAUC,UAAUC,iBACvBF,IAAUG,IAAIC,KACdJ,IAAUG,IAAIE,KACdL,IAAUC,UAAUC,gBAAiB,GAkPxBI,MA/Of,YAQI,IAPFC,EAOC,EAPDA,YACAC,EAMC,EANDA,mBACAC,EAKC,EALDA,aAMMC,EAAKC,mBACLC,EAAUD,mBACVE,EF2JD,WAAgC,IAC/BC,EAAWC,cAAXD,OAGN,MAAqB,MAFP,IAAIE,gBAAgBF,GACVG,IAAI,aE9JZC,GACVC,EAAmBR,kBAAO,GAE1BS,EAAcC,uBAAY,WAC9B,GAAIX,EAAGY,QAAS,CACd,IAAIC,GAAQ,EACRC,EAA6C,GACjD,IAAK,IAAD,EACFA,EFrCD,SAAmBC,GACxB,IADsC,EAClCC,EAAyC,GACzCnC,EAAa,EAKXoC,EAAQC,IAAMH,EAAM,CAAEI,kBAAkB,IAAQ5C,MAAM,MAPtB,cAUrB0C,GAVqB,IAUtC,2BAAwB,CAAC,IAAhBjD,EAAe,QACtB,GAAoB,KAAhBA,EAAKQ,OAAT,CAIA,IAAI4C,EAAcpD,EAAKE,MAAM7B,GACzBgF,EAA8C5C,EAAaT,GAAME,MACnE,cAMF,GAJImD,IACFA,EAAYA,EAAU,IAGpBD,EAAa,CACf,IAAME,EAASF,EAAY,GACvBG,OAAM,EACNC,EAAY3C,EAGhB,IAFkByC,EAAOjD,OAElBmD,GAAa,GAAG,CAAC,IAAD,EAEjBC,EAAcR,GADlBO,GAAa,GACuB,GAGpC,GAA2B,KAAvBC,EAAYjD,OAAhB,CAIA,IAAMkD,EAAoBD,EAAYvD,MAAM7B,GAE5C,IADW,iBAAGqF,QAAH,IAAGA,OAAH,EAAGA,EAAoB,GAAGrD,cAA1B,QAAoC,GAC7BiD,EAAOjD,OAAQ,CAC/BkD,EAASC,EACT,QAIJ,GAAID,EAAQ,CAMV,IALA,IAAMI,EAAS/C,EAAUqC,EAAMO,EAAY,GAAIA,GACzCI,EAASP,GAAwBzC,EAAUZ,EAAMa,GAGnDgD,EAAE,UAAMF,EAAN,YAAgBC,EAAhB,MACCZ,EAASc,KAAI,qBAAGC,KAAQF,MAAeG,SAASH,IAAK,CAAC,IAAD,EAC1CA,EAAGtD,MAAM,KAAlB0D,EADmD,oBAE1DA,GAASC,SAASD,EAAO,IAAM,GAAGnD,WAClC+C,EAAE,UAAMF,EAAN,YAAgBC,EAAhB,YAA0BK,GAE9BjB,EAASmB,KAAK,CACZJ,KAAM,CACJF,KACAF,SACAC,SACApF,MAAOuB,EAAaC,GACpBa,iBAKR,IAAKwC,EAAW,CACd,IAAM7E,EAAQiC,EAAaT,GAGrBC,EAAQD,EAAKE,MAAM/B,GACzB6E,EAASmB,KAAK,CACZJ,KAAK,aACHF,GAAI5D,EAAQA,EAAM,GAAKY,EAAWC,WAClCtC,QACAqC,cACGtC,EAAQC,MAIjBqC,SAtEEA,KAZkC,8BA+FtC,IARA,IAAMuD,EAAYpB,EAASzD,QACzB,SAAC8E,EAAKC,GAAN,mBAAC,eACID,GADL,kBAEGC,EAAGP,KAAKvF,MAAQ8F,EAAGP,KAAKF,OAE3B,IAGF,MAA6BU,OAAOC,QAAQxB,GAA5C,eAAuD,CAAC,IAAD,sBAA7CyB,EAA6C,KAAtCC,EAAsC,KAEjD,WAAYA,EAAQX,OACjBQ,OAAOI,OAAOP,GAAWJ,SAASU,EAAQX,KAAKH,SAC9Cc,EAAQX,KAAKH,UAAUQ,IACzBpB,EAASkB,SAASO,IAAQV,KAAKH,OAC7BQ,EAAUM,EAAQX,KAAKH,UAMjC,OAAOZ,EEtEa4B,CAAU/C,GACxB,UAAAK,EAAQU,eAAR,SAAiBiC,KAAK,CAAE7B,SAAUF,IAClC,SAAO,IAAD,EACND,GAAQ,EACR,UAAAX,EAAQU,eAAR,SAAiBkC,UACjB5C,EAAQU,QAAUtB,MAEfuB,IACHb,EAAGY,QAAQiC,KAAK,CAAE7B,SAAUF,IAC5Bd,EAAGY,QACAmC,OADH,2BAEOC,KAFP,IAGI7C,UAASM,EAAiBG,SAAUT,KAErC8C,MACHjD,EAAGY,QAAQsC,SACXzC,EAAiBG,SAAU,MAG9B,CAACT,EAASN,IAEPsD,EAAexC,uBAAY,WAC/ByC,QAAQC,IAAI,aACRrD,EAAGY,UACLZ,EAAGY,QAAQ0C,SACXtD,EAAGY,QAAQT,QAAQ,CAAEoD,IAAK,CAAEC,QAAS,QAEtC,IAEHtH,qBAAU,WACRiH,MACC,CAACA,EAAcpD,IAElB,IAAM0D,EAAkBC,YAAqBP,EAAc,KAE3DjH,qBAAU,WAER,OADAyH,OAAOC,iBAAiB,SAAUH,EAAgBI,UAC3C,kBAAMF,OAAOG,oBAAoB,SAAUL,EAAgBI,aACjE,CAACJ,IAEJ,IAAMM,EAAgBpD,uBAAY,WAChC,GAAIX,EAAGY,QAAS,CAEd,IAAMoD,EAAShE,EAAGY,QAAQqD,IAAI,CAAEC,MAAM,EAAMC,MAAO,MAE/CC,GADc,IAAIC,WACAC,gBAAgBN,EAAQ,iBAC1CO,EAAqB,YACpBH,EAAMI,SAAS,GAAGC,iBAAiB,SACtCC,QACA,SAACjI,GAAD,OACGA,EAAEkI,aAAa,SACkB,wBAAlClI,EAAEkI,aAAa,mBAEnBJ,EAAO,sBAAOA,GAAP,YAAmBH,EAAMI,SAAS,GAAGC,iBAAiB,WACrDG,SAAQ,SAACtC,GAAD,OAAQA,EAAGuC,aAAa,OAAQ,cAGhD,IAAMC,EAAsBV,EAAMW,cAAN,sDACqBlF,EADrB,SAG5BuE,EAAMI,SAAS,GAAGQ,YAAYF,GAC9B,IAAMG,EAAkBb,EAAMc,gBAAgBC,UAC9CC,iBACE,IAAIC,KAAK,CAACJ,GAAkB,CAC1BK,KAAM,gCAER,oBAGH,CAACzF,IA8GJ,OA5GA3D,qBAAU,WACRgE,EAAQU,QAAUtB,MAClBU,EAAGY,QAAUtB,IAAU,CACrBiG,UAAW5I,SAASC,eAAe,MACnCmG,OAAO,eAAMC,KACbhC,SAAU,GACVwE,MAAO,CACL,CACEC,SAAU,OACVD,MAAO,CACLE,gBAAiB,UACjB,eAAgBC,IAChBC,MAAOC,IACPrJ,MAAO,cACP,YAAa,GACb,YAAa,OACb,iBAAkB,KAClB,cAAe,SACf,cAAe,SAEf,cAAe,KACf,eAAgB,EAChBsJ,MAAO,YACP,cACE,oHACF3I,MAAO,cACPS,OAAQ,iBAGZ,CACE6H,SAAU,OACVD,MAAO,CAEL,iBAAkB,OAClB,aAAc,QACdrI,MAAO,EACP,0BAA2B,EAC3B,wBAAyB,UACzB,aAAcwI,IACd,qBAAsBA,IACtB,qBAAsB,MACtB,cAAe,EACf,cAAe,SACfnJ,MAAO,cACP,YAAa,GACb,cAAe,SACf,cACE,oHACF,cAAe,SAEf,qBAAsB,eAG1B,CACEiJ,SAAU,eACVD,MAAO,CACL,aAAc,UACd,qBAAsB,UACtBI,MAAO,YAGX,CACEH,SAAU,eACVD,MAAO,CACLE,gBAAiB,aAIvBK,oBAAoB,EACpBC,oBAAoB,EACpBC,qBAAqB,IAEvB,IAAMC,EAAYlG,EAAGY,QACfuF,EAAiBjG,EAAQU,QAG/B,SAASwF,IACPC,KAAKC,SAAS,eACdxG,EAAmBuG,KAAKtE,OAAOlD,YAEjC,SAAS0H,IACPF,KAAKC,SAAS,eACdxG,EAAmBuG,KAAKtE,OAAOlD,YAEjC,SAAS2H,IACPH,KAAKI,YAAY,eACjBJ,KAAKI,YAAY,eACjB3G,OAAmB4G,GASrB,OAPAR,EAAUS,GAAG,YAAa,OAAQP,GAClCF,EAAUS,GAAG,YAAa,OAAQJ,GAClCL,EAAUS,GAAG,WAAY,OAAQP,GACjCF,EAAUS,GAAG,WAAY,OAAQJ,GACjCL,EAAUS,GAAG,WAAY,aAAcH,GACvCN,EAAUS,GAAG,SAAU,aAAcH,GAE9B,WACLN,EAAUpD,UACVqD,EAAerD,UACf9C,EAAGY,aAAU8F,EACbxG,EAAQU,aAAU8F,KAEnB,CAAC5G,IAEJ5D,qBAAU,WACRwE,MACC,CAACA,IAGF,eAAC,IAAD,CACEkG,UAAWC,IAAOC,eAClBC,SAAS,6BACTC,SAAS,SAHX,UAKE,cAAC,IAAD,CAAKnF,GAAG,KAAKmF,SAAS,WACtB,eAAC,IAAD,CAAKC,QAAQ,gBAAgBC,KAAK,SAASC,EAAG,EAA9C,UACE,eAAC,IAAD,CAAKD,KAAK,SAASE,MAAM,SAASC,IAAK,EAAvC,UACE,cAAC,IAAD,uBACA,mBAAGC,KAAK,+BAA+BV,UAAWC,IAAOU,MAAzD,SACE,cAACvI,EAAD,MAEF,mBACEsI,KAAK,4CACLV,UAAWC,IAAOU,MAFpB,SAIE,cAAClI,EAAD,SAGJ,eAAC,IAAD,CAAK6H,KAAK,SAASE,MAAM,SAASC,IAAK,EAAvC,UACE,cAAC,IAAD,CAAMG,GAAG,SAASC,QAAS1D,EAAe2D,MAAM,eAAhD,sBADF,IAKE,cAAC,IAAD,CACEF,GAAG,IACHF,KAAI,UACF,IAAIK,IAAIhE,OAAOiE,SAASN,MAAMO,OAD5B,cAEEC,mBAAmBjI,IACzBkI,IAAI,aACJnG,OAAO,SANT,6B,0BCrPJoG,EAAI,GAEJ5I,EAAI3B,KAAKwK,GAAKD,EACL,SAASE,IACtB,OACE,qBACE/K,MAAO,GACPS,OAAQ,GACRgJ,UAAWpB,IAAM0C,QACjB1C,MAAO,CAAE,MAAO,EAAIpG,GAJtB,SAME,wBACE4I,EAAGA,EACHG,YAZE,EAaFC,KAAK,cACLC,GAAIL,GACJhI,GAAIgI,GACJM,gBAAiBlJ,EACjBmJ,iBAAkBnJ,MCNX,SAASoJ,EAAT,GAQX,IAPFhE,EAOC,EAPDA,SACA3E,EAMC,EANDA,YACAC,EAKC,EALDA,mBAKC,EACqC2I,mBAAS,GAD9C,mBACM1I,EADN,KACoB2I,EADpB,KAEOC,EAAY3M,qBAAWC,KAAvB0M,QACR,OACE,sCACIA,GAAW,cAACC,EAAD,IACb,eAAC,IAAD,CACE7B,SAAS,uCACTC,SAAS,SACTJ,UAAWC,IAAOgC,IAClBC,GAAI,CAAEC,OAAQ,CAAEC,QAAS,OAAQjC,SAAU,gBAC3CkC,MAAI,EALN,UAOE,cAAC,IAAD,CACEC,YAAa,CACX/L,MAAO,MACPS,OAAQ,QAEVuL,SAAS,MACTC,SAAS,MACTC,OAAQ,CACNC,KAAK,EACLC,OAAO,EACPC,QAAQ,EACRC,MAAM,EACNC,UAAU,EACVC,aAAa,EACbC,YAAY,EACZC,SAAS,GAEXjD,UAAWC,IAAOiD,kBAClBC,cAAe,CAAER,MAAO1C,IAAOmD,iBAC/BC,aAAc,kBAAMvB,GAAc,SAACwB,GAAD,OAAOA,EAAI,MAnB/C,SAqBG1F,IAEH,cAAC,EAAD,CACE3E,YAAaA,EACbC,mBAAoBA,EACpBC,aAAcA,IAEhB,qBAAK8B,GAAG,UAAU+E,UAAWC,IAAOnK,gBAM5C,SAASkM,IACP,OACE,cAAC,IAAD,CACEuB,WAAW,mBACXlD,QAAQ,SACRL,UAAWC,IAAO+B,QAClBK,MAAI,EAJN,SAME,cAACf,EAAD,Q,4GCGSkC,UAzEf,WAAqB,IACXC,EAAcC,cAAdD,UACFxK,EAAc0K,mBAAmBF,GAFrB,EAG4B5B,qBAH5B,mBAGX+B,EAHW,KAGM1K,EAHN,KAIZ2K,EAAYxK,iBAAO,MACnByK,EAAczK,iBAAc,IAC1BlE,EAAeC,qBAAWC,KAA1BF,WA+BR,OA7BAG,qBAAU,WACR,GAAIuO,EAAU7J,QAAS,CACrB,IAAM+J,EAASF,EAAU7J,QAGvB8J,EAAY9J,QAFiB,kBAApB4J,EAEaG,EAAOC,iBAC3B,GACA,CACE,CACE5N,MAAO,CACL6N,gBAAiBL,EACjBM,YAAa,EACbC,cAAeP,EACfQ,UAAW,GAEbC,QAAS,CACPC,aAAa,EACbtE,UAAW,iBAOG+D,EAAOC,iBAAiBF,EAAY9J,QAAS,OAGtE,CAAC4J,IAGF,cAAC,IAAD,CAAQ1K,mBAAoBA,EAAoBD,YAAaA,EAA7D,SACE,cAAC,IAAD,CACEsL,aAActL,EACdnB,MAAOmB,EACPuL,QAAS,cAAC,IAAD,IACTH,QAAS,CACPI,QAAS,CAAEC,SAAS,GACpBC,SAAU,GACVC,QAAS,EACTC,cAAc,EACdC,sBAAsB,EACtBC,sBAAsB,EACtBC,qBAAqB,EACrBC,4BAA4B,EAC5BC,sBAAsB,EACtBC,oBAAoB,EACpBC,qBAAqB,EACrBC,qBAAsB,OACtBC,4BAA6B,MAC7BC,2BAA2B,EAC3BC,cAAe,QACfC,oBAAoB,EACpBC,WAAY,GAEZC,UAAU,GAEZC,QAAS,SAAC7B,EAAQ8B,GAChBhC,EAAU7J,QAAU+J,EACpB5O,W,gCCzEV,wIAAO,IAAMiH,EAAc,CACzB0J,KAAM,QACNnJ,KAAK,EACLpD,SAAS,EACTwM,QAAS,KACTC,cAAe,MAGJjH,EAAY,UACZE,EAAY,UAEZgH,EAAW","file":"static/js/5.e7a41503.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Layout_App__r8LpH\",\"TextareaContainer\":\"Layout_TextareaContainer__eh1Jz\",\"resizableHandle\":\"Layout_resizableHandle__ZoYfz\",\"resizer\":\"Layout_resizer__2zJLY\",\"Loading\":\"Layout_Loading__1JZQm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GraphContainer\":\"Graph_GraphContainer__1TxTa\",\"media\":\"Graph_media__3Jp2l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__1VElG\",\"load\":\"Spinner_load__3cB9D\"};","/* This is a component that declares when it unmounts\nso that we can reliably show a loading screen before\nthe monaco editor is ready */\n\nimport { useContext, useEffect } from \"react\";\nimport { AppContext } from \"./AppContext\";\n\nexport default function UnmountDeclare() {\n  const { setIsReady } = useContext(AppContext);\n  useEffect(() => {\n    return setIsReady;\n  }, [setIsReady]);\n  return null;\n}\n","import strip from \"@tone-row/strip-comments\";\nimport { CytoscapeOptions } from \"cytoscape\";\nimport { useLocation } from \"react-router-dom\";\n\nconst idMatch = new RegExp(/^\\s*\\[(.*)\\]/);\nconst matchIndent = new RegExp(/^( )+/g);\nexport function parseText(text: string) {\n  let elements: CytoscapeOptions[\"elements\"] = [];\n  let lineNumber = 1;\n\n  // break into lines, removing comments but\n  // leaving newlines created in comments to\n  // preserve line numbers\n  const lines = strip(text, { preserveNewlines: true }).split(\"\\n\");\n\n  // Loop over liens\n  for (let line of lines) {\n    if (line.trim() === \"\") {\n      lineNumber++;\n      continue;\n    }\n    let indentMatch = line.match(matchIndent);\n    let linkMatch: RegExpMatchArray | null | string = getNodeLabel(line).match(\n      /^\\((.+)\\)$/\n    );\n    if (linkMatch) {\n      linkMatch = linkMatch[1];\n    }\n\n    if (indentMatch) {\n      const indent = indentMatch[0];\n      let parent;\n      let checkLine = lineNumber;\n      let checkLength = indent.length;\n\n      while (checkLine >= 1) {\n        checkLine -= 1;\n        let currentLine = lines[checkLine - 1];\n\n        /* Determine whether valid line */\n        if (currentLine.trim() === \"\") {\n          continue;\n        }\n\n        const currentLineIndent = currentLine.match(matchIndent);\n        checkLength = currentLineIndent?.[0].length ?? 0;\n        if (checkLength < indent.length) {\n          parent = checkLine;\n          break;\n        }\n      }\n      // If we found a parent\n      if (parent) {\n        const source = getNodeId(lines[checkLine - 1], checkLine);\n        const target = linkMatch ? linkMatch : getNodeId(line, lineNumber);\n\n        // Find a unique id\n        let id = `${source}_${target}:0`;\n        while (elements.map(({ data: { id } }) => id).includes(id)) {\n          let [, count] = id.split(\":\");\n          count = (parseInt(count, 10) + 1).toString();\n          id = `${source}_${target}:${count}`;\n        }\n        elements.push({\n          data: {\n            id,\n            source,\n            target,\n            label: getEdgeLabel(line),\n            lineNumber,\n          },\n        });\n      }\n    }\n    if (!linkMatch) {\n      const label = getNodeLabel(line);\n\n      // Check for custom id\n      const hasId = line.match(idMatch);\n      elements.push({\n        data: {\n          id: hasId ? hasId[1] : lineNumber.toString(),\n          label,\n          lineNumber,\n          ...getSize(label),\n        },\n      });\n    }\n    lineNumber++;\n  }\n\n  // Before returning elements, check if user\n  // used label text as pointer, and replace with id\n  const labelToId = elements.reduce<Record<string, string>>(\n    (acc, el) => ({\n      ...acc,\n      [el.data.label]: el.data.id,\n    }),\n    {}\n  );\n\n  for (let [index, element] of Object.entries(elements)) {\n    // If it is an edge\n    if (\"target\" in element.data) {\n      if (!Object.values(labelToId).includes(element.data.target)) {\n        if (element.data.target in labelToId) {\n          elements[parseInt(index)].data.target =\n            labelToId[element.data.target];\n        }\n      }\n    }\n  }\n\n  return elements;\n}\n\nconst base = 12.5;\nconst minWidth = 8 * base;\nconst minHeight = 6 * base;\n\nfunction getSize(label: string) {\n  const resizer = document.getElementById(\"resizer\");\n  if (resizer) {\n    // TODO: Widen boxes as box height climbs\n    // resizer.style.width = \"128px\";\n    // const initialHeight = resizer.clientHeight;\n    // const add = Math.max(0, Math.ceil((initialHeight - 150) / 50)) * 8;\n    // resizer.style.width = `${128 + add}px`;\n    resizer.innerHTML = preventBreakOnHypen(label);\n    if (resizer.firstChild) {\n      const range = document.createRange();\n      range.selectNodeContents(resizer.firstChild);\n      const width = Array.from(range.getClientRects()).reduce(\n        (max, { width }) => (width > max ? width : max),\n        0\n      );\n      const finalSize = {\n        width: Math.max(minWidth, cleanup(regressionX(width))),\n        height: Math.max(minHeight, cleanup(regressionY(resizer.clientHeight))),\n      };\n      return finalSize;\n    }\n  }\n  return undefined;\n}\n\nfunction getEdgeLabel(line: string) {\n  const hasId = line.match(idMatch);\n  const lineWithoutId = hasId ? line.slice(hasId[0].length) : line;\n  if (lineWithoutId.indexOf(\": \") > -1) {\n    return lineWithoutId.split(\": \")[0].trim();\n  }\n  return \"\";\n}\nfunction getNodeLabel(line: string) {\n  const hasId = line.match(idMatch);\n  const lineWithoutId = hasId ? line.slice(hasId[0].length) : line;\n  let value = lineWithoutId.trim();\n  if (lineWithoutId.indexOf(\": \") > -1) {\n    value = lineWithoutId.split(\": \").slice(1).join(\": \").trim();\n  }\n  return stripSlashes(value);\n}\n\nfunction getNodeId(line: string, lineNumber: number) {\n  const hasId = line.match(idMatch);\n  return hasId ? hasId[1] : lineNumber.toString();\n}\n\n// linear regression of text node width to graph node size\nfunction regressionX(x: number) {\n  return Math.floor(0.63567 * x + 6);\n}\nfunction regressionY(x: number) {\n  return Math.floor(0.63567 * x + 20);\n}\n\n// put things roughly on the same scale\nfunction cleanup(x: number) {\n  return Math.ceil(x / base) * base;\n}\n\nfunction stripSlashes(str: string) {\n  return str.replace(/\\\\(.)/gm, \"$1\");\n}\n\nfunction preventBreakOnHypen(str: string) {\n  return str.replace(/-/gm, \"&#x2011;\");\n}\n\nexport function useAnimationSetting() {\n  let { search } = useLocation();\n  const query = new URLSearchParams(search);\n  const animation = query.get(\"animation\");\n  return animation === \"0\" ? false : true;\n}\n","export function Twitter(props: any) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={20}\n      height={20}\n      viewBox=\"0 0 24 24\"\n      {...props}\n    >\n      <path d=\"M24 4.557a9.83 9.83 0 01-2.828.775 4.932 4.932 0 002.165-2.724 9.864 9.864 0 01-3.127 1.195 4.916 4.916 0 00-3.594-1.555c-3.179 0-5.515 2.966-4.797 6.045A13.978 13.978 0 011.671 3.149a4.93 4.93 0 001.523 6.574 4.903 4.903 0 01-2.229-.616c-.054 2.281 1.581 4.415 3.949 4.89a4.935 4.935 0 01-2.224.084 4.928 4.928 0 004.6 3.419A9.9 9.9 0 010 19.54a13.94 13.94 0 007.548 2.212c9.142 0 14.307-7.721 13.995-14.646A10.025 10.025 0 0024 4.557z\" />\n    </svg>\n  );\n}\n\nexport function Github() {\n  return (\n    <svg\n      viewBox=\"0 0 24 24\"\n      width={20}\n      height={20}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <title>{\"GitHub icon\"}</title>\n      <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" />\n    </svg>\n  );\n}\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from \"react\";\nimport cytoscape, { Core, EdgeSingular, NodeSingular } from \"cytoscape\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport dagre from \"cytoscape-dagre\";\nimport cytoscapeSvg from \"cytoscape-svg\";\nimport { LAYOUT, lineColor, textColor } from \"../constants\";\nimport { parseText, useAnimationSetting } from \"../utils\";\nimport { Github, Twitter } from \"./svgs\";\nimport styles from \"./Graph.module.css\";\nimport { saveAs } from \"file-saver\";\nimport { Box, Type } from \"../slang\";\n\nif (!cytoscape.prototype.hasInitialised) {\n  cytoscape.use(dagre);\n  cytoscape.use(cytoscapeSvg);\n  cytoscape.prototype.hasInitialised = true;\n}\n\nfunction Graph({\n  textToParse,\n  setHoverLineNumber,\n  shouldResize,\n}: {\n  textToParse: string;\n  setHoverLineNumber: Dispatch<SetStateAction<number | undefined>>;\n  shouldResize: number;\n}) {\n  const cy = useRef<undefined | Core>();\n  const errorCy = useRef<undefined | Core>();\n  const animate = useAnimationSetting();\n  const graphInitialized = useRef(false);\n\n  const updateGraph = useCallback(() => {\n    if (cy.current) {\n      let error = false;\n      let newElements: cytoscape.ElementDefinition[] = [];\n      try {\n        newElements = parseText(textToParse);\n        errorCy.current?.json({ elements: newElements });\n      } catch {\n        error = true;\n        errorCy.current?.destroy();\n        errorCy.current = cytoscape();\n      }\n      if (!error) {\n        cy.current.json({ elements: newElements });\n        cy.current\n          .layout({\n            ...LAYOUT,\n            animate: graphInitialized.current ? animate : false,\n          } as any)\n          .run();\n        cy.current.center();\n        graphInitialized.current = true;\n      }\n    }\n  }, [animate, textToParse]);\n\n  const handleResize = useCallback(() => {\n    console.log(\"Resizing!\");\n    if (cy.current) {\n      cy.current.resize();\n      cy.current.animate({ fit: { padding: 6 } } as any);\n    }\n  }, []);\n\n  useEffect(() => {\n    handleResize();\n  }, [handleResize, shouldResize]);\n\n  const debouncedResize = useDebouncedCallback(handleResize, 250);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", debouncedResize.callback);\n    return () => window.removeEventListener(\"resize\", debouncedResize.callback);\n  }, [debouncedResize]);\n\n  const downloadImage = useCallback(() => {\n    if (cy.current) {\n      // @ts-ignore\n      const svgStr = cy.current.svg({ full: true, scale: 1.5 });\n      const domparser = new DOMParser();\n      let svgEl = domparser.parseFromString(svgStr, \"image/svg+xml\");\n      let squares: Element[] = [\n        ...svgEl.children[0].querySelectorAll(\"path\"),\n      ].filter(\n        (x) =>\n          !x.getAttribute(\"fill\") &&\n          x.getAttribute(\"paint-order\") === \"fill stroke markers\"\n      );\n      squares = [...squares, ...svgEl.children[0].querySelectorAll(\"rect\")];\n      squares.forEach((el) => el.setAttribute(\"fill\", \"#ffffff\"));\n\n      // Add comment\n      const originalTextComment = svgEl.createComment(\n        `Original Flowchart Text (flowchart.fun):\\n\\n${textToParse}\\n\\n`\n      );\n      svgEl.children[0].appendChild(originalTextComment);\n      const correctedSvgStr = svgEl.documentElement.outerHTML;\n      saveAs(\n        new Blob([correctedSvgStr], {\n          type: \"image/svg+xml;charset=utf-8\",\n        }),\n        \"flowchart.svg\"\n      );\n    }\n  }, [textToParse]);\n\n  useEffect(() => {\n    errorCy.current = cytoscape();\n    cy.current = cytoscape({\n      container: document.getElementById(\"cy\"), // container to render in\n      layout: { ...LAYOUT },\n      elements: [],\n      style: [\n        {\n          selector: \"node\",\n          style: {\n            backgroundColor: \"#FFFFFF\",\n            \"border-color\": lineColor,\n            color: textColor,\n            label: \"data(label)\",\n            \"font-size\": 10,\n            \"text-wrap\": \"wrap\",\n            \"text-max-width\": \"80\",\n            \"text-valign\": \"center\",\n            \"text-halign\": \"center\",\n            // @ts-ignore\n            \"line-height\": 1.25,\n            \"border-width\": 1,\n            shape: \"rectangle\",\n            \"font-family\":\n              \"-apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol\",\n            width: \"data(width)\",\n            height: \"data(height)\",\n          },\n        },\n        {\n          selector: \"edge\",\n          style: {\n            // @ts-ignore\n            \"loop-direction\": \"0deg\",\n            \"loop-sweep\": \"20deg\",\n            width: 1,\n            \"text-background-opacity\": 1,\n            \"text-background-color\": \"#ffffff\",\n            \"line-color\": lineColor,\n            \"target-arrow-color\": lineColor,\n            \"target-arrow-shape\": \"vee\",\n            \"arrow-scale\": 1,\n            \"curve-style\": \"bezier\",\n            label: \"data(label)\",\n            \"font-size\": 10,\n            \"text-valign\": \"center\",\n            \"font-family\":\n              \"-apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol\",\n            \"text-halign\": \"center\",\n            // @ts-ignore\n            \"edge-text-rotation\": \"autorotate\",\n          },\n        },\n        {\n          selector: \".edgeHovered\",\n          style: {\n            \"line-color\": \"#aaaaaa\",\n            \"target-arrow-color\": \"#aaaaaa\",\n            color: \"#aaaaaa\",\n          },\n        },\n        {\n          selector: \".nodeHovered\",\n          style: {\n            backgroundColor: \"#ededec\",\n          },\n        },\n      ],\n      userZoomingEnabled: true,\n      userPanningEnabled: true,\n      boxSelectionEnabled: false,\n    });\n    const cyCurrent = cy.current;\n    const errorCyCurrent = errorCy.current;\n\n    // Hovering Events\n    function nodeHighlight(this: NodeSingular) {\n      this.addClass(\"nodeHovered\");\n      setHoverLineNumber(this.data().lineNumber);\n    }\n    function edgeHighlight(this: EdgeSingular) {\n      this.addClass(\"edgeHovered\");\n      setHoverLineNumber(this.data().lineNumber);\n    }\n    function unhighlight(this: NodeSingular | EdgeSingular) {\n      this.removeClass(\"nodeHovered\");\n      this.removeClass(\"edgeHovered\");\n      setHoverLineNumber(undefined);\n    }\n    cyCurrent.on(\"mouseover\", \"node\", nodeHighlight);\n    cyCurrent.on(\"mouseover\", \"edge\", edgeHighlight);\n    cyCurrent.on(\"tapstart\", \"node\", nodeHighlight);\n    cyCurrent.on(\"tapstart\", \"edge\", edgeHighlight);\n    cyCurrent.on(\"mouseout\", \"node, edge\", unhighlight);\n    cyCurrent.on(\"tapend\", \"node, edge\", unhighlight);\n\n    return () => {\n      cyCurrent.destroy();\n      errorCyCurrent.destroy();\n      cy.current = undefined;\n      errorCy.current = undefined;\n    };\n  }, [setHoverLineNumber]);\n\n  useEffect(() => {\n    updateGraph();\n  }, [updateGraph]);\n\n  return (\n    <Box\n      className={styles.GraphContainer}\n      template=\"minmax(0, 1fr) auto / none\"\n      overflow=\"hidden\"\n    >\n      <Box id=\"cy\" overflow=\"hidden\" />\n      <Box content=\"space-between\" flow=\"column\" p={2}>\n        <Box flow=\"column\" items=\"center\" gap={2}>\n          <Type>Tone Row</Type>\n          <a href=\"https://twitter.com/row_tone\" className={styles.media}>\n            <Twitter />\n          </a>\n          <a\n            href=\"https://github.com/tone-row/flowchart-fun\"\n            className={styles.media}\n          >\n            <Github />\n          </a>\n        </Box>\n        <Box flow=\"column\" items=\"center\" gap={2}>\n          <Type as=\"button\" onClick={downloadImage} title=\"Download SVG\">\n            Download\n          </Type>\n          |\n          <Type\n            as=\"a\"\n            href={`${\n              new URL(window.location.href).origin\n            }/r/${encodeURIComponent(textToParse)}`}\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            Share\n          </Type>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nexport default Graph;\n","import { CSSProperties } from \"react\";\nimport style from \"./Spinner.module.css\";\nconst r = 20;\nconst s = 3;\nconst d = Math.PI * r;\nexport default function Spinner() {\n  return (\n    <svg\n      width={2 * (r + s)}\n      height={2 * (r + s)}\n      className={style.Spinner}\n      style={{ \"--d\": 2 * d } as CSSProperties}\n    >\n      <circle\n        r={r}\n        strokeWidth={s}\n        fill=\"transparent\"\n        cx={r + s}\n        cy={r + s}\n        strokeDasharray={d}\n        strokeDashoffset={d}\n      />\n    </svg>\n  );\n}\n","import styles from \"./Layout.module.css\";\nimport { Resizable } from \"re-resizable\";\nimport React, {\n  Dispatch,\n  ReactNode,\n  SetStateAction,\n  useContext,\n  useState,\n} from \"react\";\nimport Graph from \"./Graph\";\nimport { AppContext } from \"./AppContext\";\nimport Spinner from \"./Spinner\";\nimport { Box } from \"../slang\";\n\nexport default function Layout({\n  children,\n  textToParse,\n  setHoverLineNumber,\n}: {\n  children?: ReactNode;\n  textToParse: string;\n  setHoverLineNumber: Dispatch<SetStateAction<number | undefined>>;\n}) {\n  const [shouldResize, triggerResize] = useState(0);\n  const { isReady } = useContext(AppContext);\n  return (\n    <>\n      {!isReady && <Loading />}\n      <Box\n        template=\"minmax(0, 1fr) minmax(0, 1fr) / none\"\n        overflow=\"hidden\"\n        className={styles.App}\n        at={{ tablet: { display: \"flex\", template: \"none / none\" } }}\n        root\n      >\n        <Resizable\n          defaultSize={{\n            width: \"50%\",\n            height: \"auto\",\n          }}\n          maxWidth=\"90%\"\n          minWidth=\"10%\"\n          enable={{\n            top: false,\n            right: true,\n            bottom: false,\n            left: false,\n            topRight: false,\n            bottomRight: false,\n            bottomLeft: false,\n            topLeft: false,\n          }}\n          className={styles.TextareaContainer}\n          handleClasses={{ right: styles.resizableHandle }}\n          onResizeStop={() => triggerResize((n) => n + 1)}\n        >\n          {children}\n        </Resizable>\n        <Graph\n          textToParse={textToParse}\n          setHoverLineNumber={setHoverLineNumber}\n          shouldResize={shouldResize}\n        />\n        <div id=\"resizer\" className={styles.resizer} />\n      </Box>\n    </>\n  );\n}\n\nfunction Loading() {\n  return (\n    <Box\n      background=\"color-background\"\n      content=\"center\"\n      className={styles.Loading}\n      root\n    >\n      <Spinner />\n    </Box>\n  );\n}\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport Editor from \"@monaco-editor/react\";\nimport { useParams } from \"react-router\";\nimport Layout from \"./Layout\";\nimport { AppContext } from \"./AppContext\";\nimport UnmountDeclare from \"./UnmountDeclare\";\n\nfunction ReadOnly() {\n  const { graphText } = useParams<{ graphText: string }>();\n  const textToParse = decodeURIComponent(graphText);\n  const [hoverLineNumber, setHoverLineNumber] = useState<undefined | number>();\n  const editorRef = useRef(null);\n  const decorations = useRef<any[]>([]);\n  const { setIsReady } = useContext(AppContext);\n\n  useEffect(() => {\n    if (editorRef.current) {\n      const editor = editorRef.current;\n      if (typeof hoverLineNumber === \"number\") {\n        //@ts-ignore\n        decorations.current = editor.deltaDecorations(\n          [],\n          [\n            {\n              range: {\n                startLineNumber: hoverLineNumber,\n                startColumn: 1,\n                endLineNumber: hoverLineNumber,\n                endColumn: 1,\n              },\n              options: {\n                isWholeLine: true,\n                className: \"node-hover\",\n              },\n            },\n          ]\n        );\n      } else {\n        // @ts-ignore\n        decorations.current = editor.deltaDecorations(decorations.current, []);\n      }\n    }\n  }, [hoverLineNumber]);\n\n  return (\n    <Layout setHoverLineNumber={setHoverLineNumber} textToParse={textToParse}>\n      <Editor\n        defaultValue={textToParse}\n        value={textToParse}\n        loading={<UnmountDeclare />}\n        options={{\n          minimap: { enabled: false },\n          fontSize: 16,\n          tabSize: 2,\n          insertSpaces: true,\n          wordBasedSuggestions: false,\n          occurrencesHighlight: false,\n          renderLineHighlight: false,\n          highlightActiveIndentGuide: false,\n          scrollBeyondLastLine: false,\n          renderIndentGuides: false,\n          overviewRulerBorder: false,\n          lineDecorationsWidth: \"10px\",\n          renderValidationDecorations: \"off\",\n          hideCursorInOverviewRuler: true,\n          matchBrackets: \"never\",\n          selectionHighlight: false,\n          lineHeight: 28,\n          // model: null,\n          readOnly: true,\n        }}\n        onMount={(editor, monaco) => {\n          editorRef.current = editor;\n          setIsReady();\n        }}\n      />\n    </Layout>\n  );\n}\n\nexport default ReadOnly;\n","export const LAYOUT: any = {\n  name: \"dagre\",\n  fit: true,\n  animate: true,\n  rankDir: \"LR\",\n  spacingFactor: 1.25,\n};\n\nexport const lineColor = \"#000000\";\nexport const textColor = \"#000000\";\n\nexport const defaultText = `this app works by typing\n  new lines create new nodes\n    indentation creates child nodes \n    and any text: before a colon+space creates a label\n  [linking] you can link to nodes using their ID in parentheses\n    like this: (1)\n    lines have a default ID of their line-number\n      but you can also supply a custom ID in brackets\n        like this: (linking) // use single line comments\n/*\nor \nmultiline \ncomments\n\nHave fun! 🎉\n*/`;\n"],"sourceRoot":""}